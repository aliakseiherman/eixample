/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/operator/finally';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    register(input: RegisterInput): Observable<RegisterOutput | null> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterOutput | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterOutput | null>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterOutput | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterOutput | null>(<any>null);
    }

    getAuthToken(firstName: string | null | undefined, lastName: string | null | undefined, memberships: Membership[] | null | undefined, id: string | null | undefined, userName: string | null | undefined, normalizedUserName: string | null | undefined, email: string | null | undefined, normalizedEmail: string | null | undefined, emailConfirmed: boolean | undefined, passwordHash: string | null | undefined, securityStamp: string | null | undefined, concurrencyStamp: string | null | undefined, phoneNumber: string | null | undefined, phoneNumberConfirmed: boolean | undefined, twoFactorEnabled: boolean | undefined, lockoutEnd: moment.Moment | null | undefined, lockoutEnabled: boolean | undefined, accessFailedCount: number | undefined, expires: moment.Moment): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Account/GetAuthToken?";
        if (firstName !== undefined)
            url_ += "firstName=" + encodeURIComponent("" + firstName) + "&"; 
        if (lastName !== undefined)
            url_ += "lastName=" + encodeURIComponent("" + lastName) + "&"; 
        if (memberships !== undefined)
            memberships && memberships.forEach(item => { url_ += "memberships=" + encodeURIComponent("" + item) + "&"; });
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (normalizedUserName !== undefined)
            url_ += "normalizedUserName=" + encodeURIComponent("" + normalizedUserName) + "&"; 
        if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&"; 
        if (normalizedEmail !== undefined)
            url_ += "normalizedEmail=" + encodeURIComponent("" + normalizedEmail) + "&"; 
        if (emailConfirmed === null)
            throw new Error("The parameter 'emailConfirmed' cannot be null.");
        else if (emailConfirmed !== undefined)
            url_ += "emailConfirmed=" + encodeURIComponent("" + emailConfirmed) + "&"; 
        if (passwordHash !== undefined)
            url_ += "passwordHash=" + encodeURIComponent("" + passwordHash) + "&"; 
        if (securityStamp !== undefined)
            url_ += "securityStamp=" + encodeURIComponent("" + securityStamp) + "&"; 
        if (concurrencyStamp !== undefined)
            url_ += "concurrencyStamp=" + encodeURIComponent("" + concurrencyStamp) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "phoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (phoneNumberConfirmed === null)
            throw new Error("The parameter 'phoneNumberConfirmed' cannot be null.");
        else if (phoneNumberConfirmed !== undefined)
            url_ += "phoneNumberConfirmed=" + encodeURIComponent("" + phoneNumberConfirmed) + "&"; 
        if (twoFactorEnabled === null)
            throw new Error("The parameter 'twoFactorEnabled' cannot be null.");
        else if (twoFactorEnabled !== undefined)
            url_ += "twoFactorEnabled=" + encodeURIComponent("" + twoFactorEnabled) + "&"; 
        if (lockoutEnd !== undefined)
            url_ += "lockoutEnd=" + encodeURIComponent(lockoutEnd ? "" + lockoutEnd.toJSON() : "") + "&"; 
        if (lockoutEnabled === null)
            throw new Error("The parameter 'lockoutEnabled' cannot be null.");
        else if (lockoutEnabled !== undefined)
            url_ += "lockoutEnabled=" + encodeURIComponent("" + lockoutEnabled) + "&"; 
        if (accessFailedCount === null)
            throw new Error("The parameter 'accessFailedCount' cannot be null.");
        else if (accessFailedCount !== undefined)
            url_ += "accessFailedCount=" + encodeURIComponent("" + accessFailedCount) + "&"; 
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuthToken(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }
}

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    authenticate(input: AuthenticateInput): Observable<AuthenticateOutput | null> {
        let url_ = this.baseUrl + "/api/Auth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateOutput | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateOutput | null>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateOutput | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateOutput.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateOutput | null>(<any>null);
    }

    getAuthToken(firstName: string | null | undefined, lastName: string | null | undefined, memberships: Membership[] | null | undefined, id: string | null | undefined, userName: string | null | undefined, normalizedUserName: string | null | undefined, email: string | null | undefined, normalizedEmail: string | null | undefined, emailConfirmed: boolean | undefined, passwordHash: string | null | undefined, securityStamp: string | null | undefined, concurrencyStamp: string | null | undefined, phoneNumber: string | null | undefined, phoneNumberConfirmed: boolean | undefined, twoFactorEnabled: boolean | undefined, lockoutEnd: moment.Moment | null | undefined, lockoutEnabled: boolean | undefined, accessFailedCount: number | undefined, expires: moment.Moment): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Auth/GetAuthToken?";
        if (firstName !== undefined)
            url_ += "firstName=" + encodeURIComponent("" + firstName) + "&"; 
        if (lastName !== undefined)
            url_ += "lastName=" + encodeURIComponent("" + lastName) + "&"; 
        if (memberships !== undefined)
            memberships && memberships.forEach(item => { url_ += "memberships=" + encodeURIComponent("" + item) + "&"; });
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (normalizedUserName !== undefined)
            url_ += "normalizedUserName=" + encodeURIComponent("" + normalizedUserName) + "&"; 
        if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&"; 
        if (normalizedEmail !== undefined)
            url_ += "normalizedEmail=" + encodeURIComponent("" + normalizedEmail) + "&"; 
        if (emailConfirmed === null)
            throw new Error("The parameter 'emailConfirmed' cannot be null.");
        else if (emailConfirmed !== undefined)
            url_ += "emailConfirmed=" + encodeURIComponent("" + emailConfirmed) + "&"; 
        if (passwordHash !== undefined)
            url_ += "passwordHash=" + encodeURIComponent("" + passwordHash) + "&"; 
        if (securityStamp !== undefined)
            url_ += "securityStamp=" + encodeURIComponent("" + securityStamp) + "&"; 
        if (concurrencyStamp !== undefined)
            url_ += "concurrencyStamp=" + encodeURIComponent("" + concurrencyStamp) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "phoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (phoneNumberConfirmed === null)
            throw new Error("The parameter 'phoneNumberConfirmed' cannot be null.");
        else if (phoneNumberConfirmed !== undefined)
            url_ += "phoneNumberConfirmed=" + encodeURIComponent("" + phoneNumberConfirmed) + "&"; 
        if (twoFactorEnabled === null)
            throw new Error("The parameter 'twoFactorEnabled' cannot be null.");
        else if (twoFactorEnabled !== undefined)
            url_ += "twoFactorEnabled=" + encodeURIComponent("" + twoFactorEnabled) + "&"; 
        if (lockoutEnd !== undefined)
            url_ += "lockoutEnd=" + encodeURIComponent(lockoutEnd ? "" + lockoutEnd.toJSON() : "") + "&"; 
        if (lockoutEnabled === null)
            throw new Error("The parameter 'lockoutEnabled' cannot be null.");
        else if (lockoutEnabled !== undefined)
            url_ += "lockoutEnabled=" + encodeURIComponent("" + lockoutEnabled) + "&"; 
        if (accessFailedCount === null)
            throw new Error("The parameter 'accessFailedCount' cannot be null.");
        else if (accessFailedCount !== undefined)
            url_ += "accessFailedCount=" + encodeURIComponent("" + accessFailedCount) + "&"; 
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuthToken(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }
}

@Injectable()
export class ApiServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    baseAuth(firstName: string | null | undefined, lastName: string | null | undefined, memberships: Membership[] | null | undefined, id: string | null | undefined, userName: string | null | undefined, normalizedUserName: string | null | undefined, email: string | null | undefined, normalizedEmail: string | null | undefined, emailConfirmed: boolean | undefined, passwordHash: string | null | undefined, securityStamp: string | null | undefined, concurrencyStamp: string | null | undefined, phoneNumber: string | null | undefined, phoneNumberConfirmed: boolean | undefined, twoFactorEnabled: boolean | undefined, lockoutEnd: moment.Moment | null | undefined, lockoutEnabled: boolean | undefined, accessFailedCount: number | undefined, expires: moment.Moment): Observable<string | null> {
        let url_ = this.baseUrl + "/api/BaseAuth?";
        if (firstName !== undefined)
            url_ += "firstName=" + encodeURIComponent("" + firstName) + "&"; 
        if (lastName !== undefined)
            url_ += "lastName=" + encodeURIComponent("" + lastName) + "&"; 
        if (memberships !== undefined)
            memberships && memberships.forEach(item => { url_ += "memberships=" + encodeURIComponent("" + item) + "&"; });
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (normalizedUserName !== undefined)
            url_ += "normalizedUserName=" + encodeURIComponent("" + normalizedUserName) + "&"; 
        if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&"; 
        if (normalizedEmail !== undefined)
            url_ += "normalizedEmail=" + encodeURIComponent("" + normalizedEmail) + "&"; 
        if (emailConfirmed === null)
            throw new Error("The parameter 'emailConfirmed' cannot be null.");
        else if (emailConfirmed !== undefined)
            url_ += "emailConfirmed=" + encodeURIComponent("" + emailConfirmed) + "&"; 
        if (passwordHash !== undefined)
            url_ += "passwordHash=" + encodeURIComponent("" + passwordHash) + "&"; 
        if (securityStamp !== undefined)
            url_ += "securityStamp=" + encodeURIComponent("" + securityStamp) + "&"; 
        if (concurrencyStamp !== undefined)
            url_ += "concurrencyStamp=" + encodeURIComponent("" + concurrencyStamp) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "phoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (phoneNumberConfirmed === null)
            throw new Error("The parameter 'phoneNumberConfirmed' cannot be null.");
        else if (phoneNumberConfirmed !== undefined)
            url_ += "phoneNumberConfirmed=" + encodeURIComponent("" + phoneNumberConfirmed) + "&"; 
        if (twoFactorEnabled === null)
            throw new Error("The parameter 'twoFactorEnabled' cannot be null.");
        else if (twoFactorEnabled !== undefined)
            url_ += "twoFactorEnabled=" + encodeURIComponent("" + twoFactorEnabled) + "&"; 
        if (lockoutEnd !== undefined)
            url_ += "lockoutEnd=" + encodeURIComponent(lockoutEnd ? "" + lockoutEnd.toJSON() : "") + "&"; 
        if (lockoutEnabled === null)
            throw new Error("The parameter 'lockoutEnabled' cannot be null.");
        else if (lockoutEnabled !== undefined)
            url_ += "lockoutEnabled=" + encodeURIComponent("" + lockoutEnabled) + "&"; 
        if (accessFailedCount === null)
            throw new Error("The parameter 'accessFailedCount' cannot be null.");
        else if (accessFailedCount !== undefined)
            url_ += "accessFailedCount=" + encodeURIComponent("" + accessFailedCount) + "&"; 
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBaseAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBaseAuth(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processBaseAuth(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }
}

@Injectable()
export class ItemServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    add(input: ItemDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Item/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    update(input: ItemDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Item/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    delete(input: ItemDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Item/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    getAll(): Observable<ItemDto[] | null> {
        let url_ = this.baseUrl + "/api/Item/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ItemDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ItemDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ItemDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDto[] | null>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    getCurrentLoginDetails(): Observable<GetCurrentLoginDetailsOutput | null> {
        let url_ = this.baseUrl + "/api/Session/GetCurrentLoginDetails";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentLoginDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentLoginDetails(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginDetailsOutput | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentLoginDetailsOutput | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentLoginDetails(response: HttpResponseBase): Observable<GetCurrentLoginDetailsOutput | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginDetailsOutput.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentLoginDetailsOutput | null>(<any>null);
    }

    getCurrentUserData(): Observable<GetCurrentUserDataOutput | null> {
        let url_ = this.baseUrl + "/api/Session/GetCurrentUserData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserData(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentUserDataOutput | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentUserDataOutput | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUserData(response: HttpResponseBase): Observable<GetCurrentUserDataOutput | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentUserDataOutput.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentUserDataOutput | null>(<any>null);
    }
}

export class RegisterOutput implements IRegisterOutput {
    token: string | undefined;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data; 
    }

    clone(): RegisterOutput {
        const json = this.toJSON();
        let result = new RegisterOutput();
        result.init(json);
        return result;
    }
}

export interface IRegisterOutput {
    token: string | undefined;
}

export class RegisterInput implements IRegisterInput {
    firstName: string;
    lastName: string;
    userName: string;
    email: string;
    password: string;
    confirmPassword: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.password = data["password"];
            this.confirmPassword = data["confirmPassword"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data; 
    }

    clone(): RegisterInput {
        const json = this.toJSON();
        let result = new RegisterInput();
        result.init(json);
        return result;
    }
}

export interface IRegisterInput {
    firstName: string;
    lastName: string;
    userName: string;
    email: string;
    password: string;
    confirmPassword: string | undefined;
}

export class EntityOfInt64 implements IEntityOfInt64 {
    id: number;

    constructor(data?: IEntityOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityOfInt64 {
        const json = this.toJSON();
        let result = new EntityOfInt64();
        result.init(json);
        return result;
    }
}

export interface IEntityOfInt64 {
    id: number;
}

export class Membership extends EntityOfInt64 implements IMembership {
    user: ApplicationUser | undefined;
    userId: string | undefined;
    tenant: Tenant | undefined;
    tenantId: number;
    creationTime: moment.Moment;

    constructor(data?: IMembership) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.user = data["user"] ? ApplicationUser.fromJS(data["user"]) : <any>undefined;
            this.userId = data["userId"];
            this.tenant = data["tenant"] ? Tenant.fromJS(data["tenant"]) : <any>undefined;
            this.tenantId = data["tenantId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Membership {
        data = typeof data === 'object' ? data : {};
        let result = new Membership();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }

    clone(): Membership {
        const json = this.toJSON();
        let result = new Membership();
        result.init(json);
        return result;
    }
}

export interface IMembership extends IEntityOfInt64 {
    user: ApplicationUser | undefined;
    userId: string | undefined;
    tenant: Tenant | undefined;
    tenantId: number;
    creationTime: moment.Moment;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id: string | undefined;
    userName: string | undefined;
    normalizedUserName: string | undefined;
    email: string | undefined;
    normalizedEmail: string | undefined;
    emailConfirmed: boolean;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    concurrencyStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd: moment.Moment | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.normalizedUserName = data["normalizedUserName"];
            this.email = data["email"];
            this.normalizedEmail = data["normalizedEmail"];
            this.emailConfirmed = data["emailConfirmed"];
            this.passwordHash = data["passwordHash"];
            this.securityStamp = data["securityStamp"];
            this.concurrencyStamp = data["concurrencyStamp"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.twoFactorEnabled = data["twoFactorEnabled"];
            this.lockoutEnd = data["lockoutEnd"] ? moment(data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = data["lockoutEnabled"];
            this.accessFailedCount = data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }

    clone(): IdentityUserOfString {
        const json = this.toJSON();
        let result = new IdentityUserOfString();
        result.init(json);
        return result;
    }
}

export interface IIdentityUserOfString {
    id: string | undefined;
    userName: string | undefined;
    normalizedUserName: string | undefined;
    email: string | undefined;
    normalizedEmail: string | undefined;
    emailConfirmed: boolean;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    concurrencyStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd: moment.Moment | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }

    clone(): IdentityUser {
        const json = this.toJSON();
        let result = new IdentityUser();
        result.init(json);
        return result;
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    firstName: string | undefined;
    lastName: string | undefined;
    memberships: Membership[] | undefined;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            if (data["memberships"] && data["memberships"].constructor === Array) {
                this.memberships = [] as any;
                for (let item of data["memberships"])
                    this.memberships.push(Membership.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        if (this.memberships && this.memberships.constructor === Array) {
            data["memberships"] = [];
            for (let item of this.memberships)
                data["memberships"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }

    clone(): ApplicationUser {
        const json = this.toJSON();
        let result = new ApplicationUser();
        result.init(json);
        return result;
    }
}

export interface IApplicationUser extends IIdentityUser {
    firstName: string | undefined;
    lastName: string | undefined;
    memberships: Membership[] | undefined;
}

export class EntityOfInt32 implements IEntityOfInt32 {
    id: number;

    constructor(data?: IEntityOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityOfInt32 {
        const json = this.toJSON();
        let result = new EntityOfInt32();
        result.init(json);
        return result;
    }
}

export interface IEntityOfInt32 {
    id: number;
}

export class Tenant extends EntityOfInt32 implements ITenant {
    name: string | undefined;
    hostName: string | undefined;
    isDeleted: boolean;
    creationTime: moment.Moment;
    deletionTime: moment.Moment | undefined;

    constructor(data?: ITenant) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.hostName = data["hostName"];
            this.isDeleted = data["isDeleted"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Tenant {
        data = typeof data === 'object' ? data : {};
        let result = new Tenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["hostName"] = this.hostName;
        data["isDeleted"] = this.isDeleted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }

    clone(): Tenant {
        const json = this.toJSON();
        let result = new Tenant();
        result.init(json);
        return result;
    }
}

export interface ITenant extends IEntityOfInt32 {
    name: string | undefined;
    hostName: string | undefined;
    isDeleted: boolean;
    creationTime: moment.Moment;
    deletionTime: moment.Moment | undefined;
}

export class AuthenticateOutput implements IAuthenticateOutput {
    token: string | undefined;

    constructor(data?: IAuthenticateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): AuthenticateOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data; 
    }

    clone(): AuthenticateOutput {
        const json = this.toJSON();
        let result = new AuthenticateOutput();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateOutput {
    token: string | undefined;
}

export class AuthenticateInput implements IAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean;

    constructor(data?: IAuthenticateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): AuthenticateInput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }

    clone(): AuthenticateInput {
        const json = this.toJSON();
        let result = new AuthenticateInput();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean;
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityDtoOfInt64 {
        const json = this.toJSON();
        let result = new EntityDtoOfInt64();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class ItemDto extends EntityDtoOfInt64 implements IItemDto {
    name: string | undefined;
    description: string | undefined;

    constructor(data?: IItemDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): ItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        super.toJSON(data);
        return data; 
    }

    clone(): ItemDto {
        const json = this.toJSON();
        let result = new ItemDto();
        result.init(json);
        return result;
    }
}

export interface IItemDto extends IEntityDtoOfInt64 {
    name: string | undefined;
    description: string | undefined;
}

export class GetCurrentLoginDetailsOutput implements IGetCurrentLoginDetailsOutput {
    tenant: TenantDto | undefined;
    user: UserDto | undefined;

    constructor(data?: IGetCurrentLoginDetailsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant = data["tenant"] ? TenantDto.fromJS(data["tenant"]) : <any>undefined;
            this.user = data["user"] ? UserDto.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginDetailsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginDetailsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCurrentLoginDetailsOutput {
        const json = this.toJSON();
        let result = new GetCurrentLoginDetailsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentLoginDetailsOutput {
    tenant: TenantDto | undefined;
    user: UserDto | undefined;
}

export class TenantDto extends EntityDtoOfInt64 implements ITenantDto {
    name: string | undefined;
    hostName: string | undefined;

    constructor(data?: ITenantDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.hostName = data["hostName"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["hostName"] = this.hostName;
        super.toJSON(data);
        return data; 
    }

    clone(): TenantDto {
        const json = this.toJSON();
        let result = new TenantDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDto extends IEntityDtoOfInt64 {
    name: string | undefined;
    hostName: string | undefined;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string | undefined;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityDtoOfString {
        const json = this.toJSON();
        let result = new EntityDtoOfString();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfString {
    id: string | undefined;
}

export class UserDto extends EntityDtoOfString implements IUserDto {
    firstName: string | undefined;
    lastName: string | undefined;
    email: string | undefined;
    userName: string | undefined;

    constructor(data?: IUserDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        super.toJSON(data);
        return data; 
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto extends IEntityDtoOfString {
    firstName: string | undefined;
    lastName: string | undefined;
    email: string | undefined;
    userName: string | undefined;
}

export class GetCurrentUserDataOutput implements IGetCurrentUserDataOutput {
    user: UserDto | undefined;

    constructor(data?: IGetCurrentUserDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserDto.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentUserDataOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentUserDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCurrentUserDataOutput {
        const json = this.toJSON();
        let result = new GetCurrentUserDataOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentUserDataOutput {
    user: UserDto | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}